#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov 10 02:39:50 2018

@author: titi
"""

# importing important packages
import pandas as pd
import numpy as np
from sklearn import metrics
#from sklearn.svm import SVR, LinearSVR
# reading the dataSet
train_data = pd.read_csv("train.csv")
test_data = pd.read_csv("test.csv")

#transfer the data format from string to int
from sklearn import preprocessing
train_data['penalty']

cat_cols = ['penalty']
for col in cat_cols:
    lbl = preprocessing.LabelEncoder()
    lbl.fit(list(train_data[col].values.astype('str')))
    train_data[col] = lbl.transform(list(train_data[col].values.astype('str')))
for col in cat_cols:
    lbl = preprocessing.LabelEncoder()
    lbl.fit(list(test_data[col].values.astype('str')))
    test_data[col] = lbl.transform(list(test_data[col].values.astype('str')))

#train_hot=pd.get_dummies(train_data['alpha'])
#train_data=pd.concat([train_data,train_hot],axis=1)
#test_hot=pd.get_dummies(test_data['alpha'])
#test_data=pd.concat([test_data,test_hot],axis=1)

def mul_col(a,b,c):
    return a*b*c

train_data['n_jobs']=train_data['n_jobs'].replace([-1],[16])
test_data['n_jobs']=test_data['n_jobs'].replace([-1],[16])

train_data['max_iter']=mul_col(train_data['max_iter'],train_data['n_samples'],train_data['n_features'])
test_data['max_iter']=mul_col(test_data['max_iter'],test_data['n_samples'],test_data['n_features'])

train_data.drop(['id','n_samples','n_features','random_state','alpha','n_informative','l1_ratio'],axis=1,inplace=True)
test_data.drop(['id','n_samples','n_features','random_state','alpha','n_informative','l1_ratio'],axis=1,inplace=True)



train_data=train_data[train_data['time']<40]
print(len(train_data))
 #split dataSet into train and test
from sklearn.model_selection import train_test_split
train, test = train_test_split(train_data, test_size=0.2, random_state=1)

x_train = train.drop('time', axis=1)  
y_train = train['time']
x_test=test.drop('time',axis=1)
y_test=test['time']


from sklearn.ensemble import GradientBoostingRegressor
model2 = GradientBoostingRegressor(
        loss='ls',      
        n_estimators=500, 
        learning_rate=0.1,  
        max_depth=4,   
        subsample=1.0,  
        min_samples_split=4, 
        min_samples_leaf=3, 
        max_features=None, 
        max_leaf_nodes=None, 
        min_impurity_split=1e-7, 
        verbose=0, 
        warm_start=False,
        random_state=100)  

model2.fit(x_train, y_train)
y_pred2 = model2.predict(x_test)
loss2 = metrics.mean_squared_error(y_test, y_pred2)

test_pred2 = model2.predict(test_data)
def pos(test_pred):
    for i in range(len(test_data)):
        if test_pred[i]<0:
            test_pred[i]=test_pred[i]*-1
pos(test_pred2)

        
